use std::collections::HashMap;

const FONT_HEIGHT: usize = 5;

pub fn render_text(text: &str) -> String {
    let font = build_font();
    let mut lines = vec![String::new(); FONT_HEIGHT];

    for ch in text.to_uppercase().chars() {
        let block = font.get(&ch).unwrap_or(&font[&'?']);
        for (i, line) in block.iter().enumerate() {
            lines[i].push_str(line);
            lines[i].push(' ');
        }
    }

    lines.join("\n")
}

fn build_font() -> HashMap<char, [&'static str; FONT_HEIGHT]> {
    use std::iter::FromIterator;

    HashMap::from_iter([
        ('A', [" ##  ", "#  # ", "#### ", "#  # ", "#  # "]),
        ('B', ["###  ", "#  # ", "###  ", "#  # ", "###  "]),
        ('C', [" ##  ", "#  # ", "#    ", "#  # ", " ##  "]),
        ('D', ["###  ", "#  # ", "#  # ", "#  # ", "###  "]),
        ('E', ["#### ", "#    ", "###  ", "#    ", "#### "]),
        ('F', ["#### ", "#    ", "###  ", "#    ", "#    "]),
        ('G', [" ##  ", "#    ", "# ## ", "#  # ", " ### "]),
        ('H', ["#  # ", "#  # ", "#### ", "#  # ", "#  # "]),
        ('I', ["###  ", " #   ", " #   ", " #   ", "###  "]),
        ('J', ["  ## ", "   # ", "   # ", "#  # ", " ##  "]),
        ('K', ["#  # ", "# #  ", "##   ", "# #  ", "#  # "]),
        ('L', ["#    ", "#    ", "#    ", "#    ", "#### "]),
        ('M', ["#   #", "## ##", "# # #", "#   #", "#   #"]),
        ('N', ["#   #", "##  #", "# # #", "#  ##", "#   #"]),
        ('O', [" ##  ", "#  # ", "#  # ", "#  # ", " ##  "]),
        ('P', ["###  ", "#  # ", "###  ", "#    ", "#    "]),
        ('Q', [" ##  ", "#  # ", "#  # ", "# ## ", " ### "]),
        ('R', ["###  ", "#  # ", "###  ", "# #  ", "#  # "]),
        ('S', [" ### ", "#    ", " ##  ", "   # ", "###  "]),
        ('T', ["#####", "  #  ", "  #  ", "  #  ", "  #  "]),
        ('U', ["#  # ", "#  # ", "#  # ", "#  # ", " ##  "]),
        ('V', ["#   #", "#   #", "#   #", " # # ", "  #  "]),
        ('W', ["#   #", "#   #", "# # #", "## ##", "#   #"]),
        ('X', ["#   #", " # # ", "  #  ", " # # ", "#   #"]),
        ('Y', ["#   #", " # # ", "  #  ", "  #  ", "  #  "]),
        ('Z', ["#####", "   # ", "  #  ", " #   ", "#####"]),
        ('0', [" ##  ", "#  # ", "#  # ", "#  # ", " ##  "]),
        ('1', ["  #  ", " ##  ", "  #  ", "  #  ", " ### "]),
        ('2', ["###  ", "   # ", " ##  ", "#    ", "#### "]),
        ('3', ["###  ", "   # ", " ##  ", "   # ", "###  "]),
        ('4', ["#  # ", "#  # ", "#### ", "   # ", "   # "]),
        ('5', ["#### ", "#    ", "###  ", "   # ", "###  "]),
        ('6', [" ##  ", "#    ", "###  ", "#  # ", " ##  "]),
        ('7', ["#### ", "   # ", "  #  ", " #   ", " #   "]),
        ('8', [" ##  ", "#  # ", " ##  ", "#  # ", " ##  "]),
        ('9', [" ##  ", "#  # ", " ### ", "   # ", " ##  "]),
        (' ', ["     ", "     ", "     ", "     ", "     "]),
        ('?', ["###  ", "   # ", " ##  ", "     ", " #   "]),
    ])
}
